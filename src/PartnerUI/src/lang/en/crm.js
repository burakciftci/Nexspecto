export default {
  crm: {
    common: {
      save: 'Save',
      saveInformation: 'Save Information',
      updateInformation: 'Update Information',
      update: 'Update',
      new: 'New',
      edit: 'Edit',
      delete: 'Delete',
      actions: 'Actions',
      deleteQuestion: 'Are you sure want to delete?',
      internalPhone: 'Internal Phone',
      phTelecomNumber: ' enter',
      errorLookupFields: 'İlgili Bilgiler Yüklenemedi!',
      dashboard: 'Customer General View',
      contactInformation: 'İletişim Bilgileri',
      addContact: 'İletişim  Ekle',
      addAddress: 'Adres Ekle',
      newParam: 'New Parameter',
      refresh: 'Refresh',
      createParty: 'Create Person'
    },
    screenName: {
      personCreateIdentity: 'Identity',
      personCreateAddress: 'Address',
      personCreateContact: 'Contact',
      personCreateJob: 'Occupation'
    },
    personList: {
      partyType: 'Party Type',
      partyId: 'Party Id',
      branch: 'Branch',
      partyName: 'Name & Surname',
      identification: 'Idetification Number',
      phone: 'Phone',
      birthDay: 'Birth Date',
      view: 'Update Customer',
      delete: 'Delete Customer'
    },
    address: {
      recipientName: 'Recipient Name ',
      neighborhood: 'Neighborhood',
      addressType: 'Address Type',
      mainRoad: 'Main Road',
      country: 'Country',
      street: 'Street',
      province: 'Province',
      block: 'Block',
      buildingName: 'Building Name',
      district: 'District',
      buildingNumber: 'Building Number',
      postalCode: 'Postal Code',
      phRecipientName: 'Please Enter The Recipient Name ',
      phNeighborhood: 'Please Enter The Neighborhood',
      phAddressType: 'Please Enter The Address Type',
      phMainRoad: 'Please Enter The Main Road',
      phCountry: 'Please Enter The Country',
      phStreet: 'Please Enter The Street',
      phProvince: 'Please Enter The Province',
      phBlock: 'Please Enter The Block',
      phFloor: 'Please Enter The Floor',
      phFlatNumber: 'Please Enter The Flat Number',
      phBuildingName: 'Please Enter The Building Name',
      phDistrict: 'Please Enter The District',
      phBuildingNumber: 'Please Enter The Building Number',
      phPostalCode: 'Please Enter The Postal Code'
    },
    personCreate: {
      branch: 'Branch',
      tckn: 'TCKN',
      gender: 'Gender',
      firstName: 'First Name',
      middleName: 'Middle Name',
      lastName: 'Last Name',
      dateOfBirth: 'Date of Birth',
      preferedLanguage: 'Prefered Language',
      phBranch: 'Please Enter The Branch',
      phDateOfBirth: 'Please Enter The Date of Birth',
      phTckn: 'Please Enter The TCKN',
      phGender: 'Please Choose The Gender',
      phFirstName: 'Please Enter The First Name',
      phMiddleName: 'Please Enter The Middle Name',
      phLastName: 'Please Enter The Last Name',
      phPreferedLanguage: 'Please Choose The Prefered Language',
      valRequiredFirstName: 'First Name Required',
      valFirstName: 'Character must be 2 between 250',
      valMiddleName: 'Character must be 2 between 250',
      valRequiredLastName: 'Soyisim girilmesi zorunludur',
      valLastName: 'Last Name Required'
    },
    personCreateIdentity: {
      placeOfBirth: 'Date of Birth',
      homeCountry: 'Home Country',
      fatherName: 'Father Name',
      motherName: 'Mother Name',
      citizenshipStatus: 'Citizenship Status',
      nationality: 'Nationality',
      kvkStatus: 'KVK Status',
      phPlaceOfBirth: 'Please enter the date of birth.',
      phHomeCountry: 'Please choose the home country.',
      phFatherName: 'Please enter the father name.',
      phMotherName: 'Please enter the mother name.',
      phNationality: 'Please choose the nationality.',
      phCitizenshipStatus: 'Please choose the citizenship status.',
      phKvkStatus: 'Please choose the kvk status.',
      valFatherName: 'Character must be 2 between 250',
      valMotherName: 'Character must be 2 between 250',
      valMotherMaidenName: 'Character must be 2 between 250',
      errorProvinceList: 'Error getting province'
    },
    personCreateJob: {
      employmentStatus: 'Employment Status',
      personalTitle: 'Personel Title',
      occupation: 'Occupation',
      incomeGroup: 'Income Group',
      phEmploymentStatus: 'Please choose employment status.',
      phPersonalTitle: 'Please choose personel title.',
      phOccupation: 'Please choose occupation.',
      phIncomeGroup: 'Please choose income group.'
    },
    placeholder: {
      recipientNamePH: 'Please Enter The Recipient Name ',
      neighborhoodPH: 'Please Enter The Neighborhood',
      addressTypePH: 'Please Enter The Address Type',
      mainRoadPH: 'Please Enter The Main Road',
      countryPH: 'Please Enter The Country',
      streetPH: 'Please Enter The Street',
      provincePH: 'Please Enter The Province',
      buildingNamePH: 'Please Enter The Building Name',
      districtPH: 'Please Enter The District',
      buildingNumberPH: 'Please Enter The Building Number',
      postalCodePH: 'Please Enter The Postal Code',
      mobilePhonePH: 'Please Enter The Mobile Phone',
      homePhonePH: 'Please Enter The Home Phone',
      workPhonePH: 'Please Enter The Work Phone / Internal',
      eMailPH: 'Please Enter The Email Address',
      websitePH: 'Please Enter The Website Address',
      employmentStatusPH: 'Please Enter The Employment Status',
      personalTitlePH: 'Please Enter The Personal Title',
      occupationPH: 'Please Enter The Occupation',
      incomeGroupPH: 'Please Enter The Income Group'
    },
    contact: {
      mobilePhone: 'Mobile Phone',
      homePhone: 'Home Phone',
      workPhone: 'Work Phone / Internal',
      eMail: 'Email Address',
      website: 'Website'
    },
    parameterClassification: {
      classificationDialogTitle: 'Classification Title',
      classificationType: 'Type',
      categoryName: 'Classification Name',
      categoryDescription: 'Classification Description',
      categoryNumber: 'Classification Number',
      edit: 'Edit',
      delete: 'Delete',
      new: 'New',
      save: 'Save',
      phCategoryType: 'Please Enter The Classification Type',
      phCategoryName: 'Please Enter The Classification Name',
      phCategoryDescription: 'Please Enter The Classification Description',
      valCategoryType: 'Choose Classification type',
      valCategoryNameRequired: 'Classification name required',
      valCategoryName: 'Character must be 2 between 250',
      valCategoryDescription: 'Character must be 2 between 250',
      errorClassificationTypes: 'Error classification type',
      errorClassificationValues: 'Error classification values'
    },
    parameterClassificationMap: {
      dialogTitle: 'Classification Map Title',
      classificationMapType: 'Type',
      classificationType: 'Classification Type',
      classificationIdTo: 'Definition',
      classificationIdFrom: 'Relational Definition',
      id: 'Id',
      phClassificationMapType: 'Choose classification map type.',
      phClassificatioIdTo: 'Chosse classification.',
      phClassificationIdFrom: 'Choose relational classification.',
      valClassificationMapType: 'Classification map type required.',
      valClassificationIdTo: 'Classification definitiyon required.',
      valClassificationIdFrom: 'Relational classification reuqired.',
      deleteLabel: 'Delete Definiton'
    },
    parameterGeo: {
      geoDialogTitle: 'Geo Title',
      isoCode: 'Iso Code',
      geoName: 'Geo Name',
      isoCodeShort: 'IsoCode Short',
      integrationCode: 'Integration Code',
      additionalCode: 'Additional Code',
      dialingCode: 'Dialing Code',
      description: 'Description',
      geoId: 'Geo Id',
      type: 'Type',
      isActive: 'Is Active',
      deleteLabel: 'Geo Definition Delete',
      phGeoType: 'Choose Geo Type',
      phIsoCode: 'Enter Iso Code',
      phGeoName: 'Enter Geo Name',
      phIsoCodeShort: 'Enter Iso Code Short Name',
      phIntegrationCode: 'Enter Entegration Code',
      phAdditionalCode: 'Enter Additional Code',
      phDialingCode: 'Enter Dialing Code',
      phDescription: 'Enter Description',
      valGeoType: 'Choose geo type',
      valGeoName: 'Character must be 2 between 250',
      valGeoCode: 'Character must be 2 between 250',
      valGeoSecCode: 'Character must be 2 between 250',
      valAbbreviation: 'Character must be 2 between 250',
      valIntegrationCode: 'Character must be 2 between 250',
      valCallingCode: 'Character must be 2 between 250',
      valDescription: 'Character must be 2 between 250',
      errorGeoTypes: 'Character must be 2 between 250',
      errorGeoValues: 'Character must be 2 between 250',
      actives: 'Active',
      archives: 'Arhieve'
    },
    parameterGeoMap: {
      geoMapDialogTitle: 'Geo Map Title',
      geoAssocType: 'Association Type',
      geoIdTo: 'Description',
      geoId: 'Associated Description',
      id: 'Id',
      deleteLabel: 'Delete Geo Map',
      phGeoMapGeoAssocType: 'Please Enter the Geo Assoc Type',
      phGeoMapGeoIdTo: 'Please Enter the Geo To',
      phGeoMapGeoId: 'Please Enter the Geo From',
      valGeoAssocType: 'Geo assoc type required',
      valGeoIdTo: 'Geo Id To required',
      valGeoId: 'Geo Id From required',
      errorGeoAssocTypes: 'Error getting types.',
      errorAllGeoAssocValues: 'Error getting values.',
      errorLookupFields: 'Error getting values.'
    },
    parameterContactMechPurposeType: {
      dialogTitle: 'Purpose Type',
      id: 'Id',
      name: 'Name',
      description: 'Description',
      deleteRoleLabel: 'Purpose Type Delete',
      phName: 'Name',
      phDescription: 'Description',
      actives: 'Active',
      archives: 'Arhive',
      errorGetAllValues: 'Error getting values'
    },
    parameterContactMechPurposeTypeMap: {
      dialogTitle: 'Purpose Type Map',
      contactMechType: 'Contact Mech Type',
      purposeType: 'Purpose Type',
      partyType: 'Party Type',
      id: 'Id',
      deleteRoleLabel: 'Purpose Type Map Delete',
      phContactMechType: 'Contact Mech Type',
      phPurposeType: 'Purpose Type',
      phPartyType: 'Party Type',
      valContactMechTypeRequired: 'Contact Mech Type required',
      valPurposeTypeRequired: 'Purpose Type required',
      valPartyTypeequired: 'Party Type required',
      errorAllValues: 'Error getting all values',
      errorContactMechTypes: 'Error getting contact mech types',
      errorPurposeTypeList: 'Error getting purpose types',
      errorPartyTypes: 'Error getting party types'
    },
    personEditResidencePermit: {
      foreignersId: 'Foreigners Id',
      nationality: 'Nationality',
      name: 'Name',
      lastName: 'Last Name',
      birthDate: 'Birth Date',
      typeOfResidencePermit: 'Type Of Residence Permit',
      dateOfIssue: 'Date Of Issue',
      provinceOfResidence: 'Province Of Residence',
      validFrom: 'Valid From',
      validUntil: 'Valid Until'
    }
  }
}
